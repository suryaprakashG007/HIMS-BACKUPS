"use strict";angular.module("bahmni.common.conceptSet").factory("formService",["$http",function($http){var getFormList=function(encounterUuid){return $http.get(Bahmni.Common.Constants.latestPublishedForms,{params:{encounterUuid:encounterUuid}})},getAllForms=function(){return $http.get(Bahmni.Common.Constants.allFormsUrl,{params:{v:"custom:(version,name,uuid)"}})},getFormDetail=function(formUuid,params){return $http.get(Bahmni.Common.Constants.formUrl+"/"+formUuid,{params:params})};const getUrlWithUuid=function(url,patientUuid){return url.replace("{patientUuid}",patientUuid)};var getAllPatientForms=function(patientUuid,numberOfVisits,patientProgramUuid){const patientFormsUrl=getUrlWithUuid(Bahmni.Common.Constants.patientFormsUrl,patientUuid),params={numberOfVisits:numberOfVisits,formType:"v2",patientProgramUuid:patientProgramUuid};return $http.get(patientFormsUrl,{params:params})};return{getFormList:getFormList,getAllForms:getAllForms,getFormDetail:getFormDetail,getFormTranslations:function(url,form){return url&&url!==Bahmni.Common.Constants.formTranslationsUrl?$http.get(url):$http.get(Bahmni.Common.Constants.formTranslationsUrl,{params:form})},getFormTranslate:function(formName,formVersion,locale,formUuid){return $http.get(Bahmni.Common.Constants.formBuilderTranslationApi,{params:{formName:formName,formVersion:formVersion,locale:locale,formUuid:formUuid}})},getAllPatientForms:getAllPatientForms}}]),angular.module("bahmni.common.services").factory("pacsService",["$http",function($http){return{search:function(patientId){var params={patientId:patientId};return $http.get("/openmrs/ws/rest/v1/pacs/studies",{method:"GET",params:params,withCredentials:!0})},getAccessionNumber:function(identifier){if(identifier.system.indexOf("urn:bahmni:accession")<0)return null;var parts=identifier.value.split("urn:oid:");return parts&&2===parts.length?parts[1]:""}}}]),angular.module("bahmni.common.services").factory("virtualConsultService",["$http","$rootScope",function($http,$rootScope){return{launchMeeting:function(uuid,link){$rootScope.$broadcast("event:launchVirtualConsult",{uuid:uuid,link:link})}}}]),angular.module("bahmni.common.util").factory("transmissionService",["$http","$q","$rootScope","locationService","$bahmniCookieStore","$translate","appService","visitService","$filter","messagingService",function($http,$q,$rootScope,locationService,$bahmniCookieStore,$translate,appService,visitService,$filter,messagingService){return{sendEmail:function(attachments,subject,body,emailUrl,cc,bcc){var params={mailAttachments:attachments,subject:subject,body:body,cc:cc,bcc:bcc},deferred=$q.defer();return $http.post(emailUrl,params,{withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(response){200!=response.data.statusLine.statusCode?messagingService.showMessage("error",response.data.statusLine.reasonPhrase):messagingService.showMessage("info",response.data.statusLine.reasonPhrase),deferred.resolve(response)}),deferred.promise},getSharePrescriptionMailContent:function(prescriptionDetails){var message=$translate.instant(Bahmni.Clinical.Constants.sharePrescriptionMailContent);return message=message.replace("#recipientName",prescriptionDetails.patient.name),message=message.replaceAll("#locationName",$rootScope.facilityLocation.name),message=message.replace("#locationAddress",$rootScope.facilityLocation.attributes[0]?$rootScope.facilityLocation.attributes[0].display.split(":")[1].trim():""),message=message.replace("#visitDate",$filter("bahmniDate")(prescriptionDetails.visitDate))}}}]),angular.module("bahmni.common.domain").service("visitService",["$http",function($http){this.getVisit=function(uuid,params){var parameters=params||"custom:(uuid,visitId,visitType,patient,encounters:(uuid,encounterType,voided,orders:(uuid,orderType,voided,concept:(uuid,set,name),),obs:(uuid,value,concept,obsDatetime,groupMembers:(uuid,concept:(uuid,name),obsDatetime,value:(uuid,name),groupMembers:(uuid,concept:(uuid,name),value:(uuid,name),groupMembers:(uuid,concept:(uuid,name),value:(uuid,name)))))))";return $http.get(Bahmni.Common.Constants.visitUrl+"/"+uuid,{params:{v:parameters}})},this.endVisit=function(visitUuid){return $http.post(Bahmni.Common.Constants.endVisitUrl+"?visitUuid="+visitUuid,{withCredentials:!0})},this.endVisitAndCreateEncounter=function(visitUuid,bahmniEncounterTransaction){return $http.post(Bahmni.Common.Constants.endVisitAndCreateEncounterUrl+"?visitUuid="+visitUuid,bahmniEncounterTransaction,{withCredentials:!0})},this.updateVisit=function(visitUuid,attributes){return $http.post(Bahmni.Common.Constants.visitUrl+"/"+visitUuid,attributes,{withCredentials:!0})},this.createVisit=function(visitDetails){return $http.post(Bahmni.Common.Constants.visitUrl,visitDetails,{withCredentials:!0})},this.checkIfActiveVisitExists=function(patientUuid,visitLocationUuid){return $http.get(Bahmni.Common.Constants.visitUrl,{params:{includeInactive:!1,patient:patientUuid,location:visitLocationUuid},withCredentials:!0})},this.getVisitSummary=function(visitUuid){return $http.get(Bahmni.Common.Constants.visitSummaryUrl,{params:{visitUuid:visitUuid},withCredentials:!0})},this.search=function(parameters){return $http.get(Bahmni.Common.Constants.visitUrl,{params:parameters,withCredentials:!0})},this.getVisitType=function(){return $http.get(Bahmni.Common.Constants.visitTypeUrl,{withCredentials:!0})}}]),angular.module("bahmni.common.domain").service("diagnosisService",["$http","$rootScope",function($http,$rootScope){var self=this;this.getAllFor=function(searchTerm,locale){var url=Bahmni.Common.Constants.bahmniapiConceptUrl,parameters={term:searchTerm,limit:Bahmni.Common.Constants.emrapiDiagnosisLimit};return locale&&(parameters.locale=locale),$http.get(url,{params:parameters})},this.getDiagnoses=function(patientUuid,visitUuid){var url=Bahmni.Common.Constants.bahmniDiagnosisUrl;return $http.get(url,{params:{patientUuid:patientUuid,visitUuid:visitUuid}})},this.getPatientDiagnosis=function(patientUuid){var url=Bahmni.Common.Constants.bahmniDiagnosisUrl;return $http.get(url,{params:{patientUuid:patientUuid}})},this.deleteDiagnosis=function(obsUuid){var url=Bahmni.Common.Constants.bahmniDeleteDiagnosisUrl;return $http.get(url,{params:{obsUuid:obsUuid}})},this.getDiagnosisConceptSet=function(){return $http.get(Bahmni.Common.Constants.conceptUrl,{method:"GET",params:{v:"custom:(uuid,name,setMembers)",code:Bahmni.Common.Constants.diagnosisConceptSet,source:Bahmni.Common.Constants.emrapiConceptMappingSource},withCredentials:!0})},this.getPastAndCurrentDiagnoses=function(patientUuid,encounterUuid){return self.getDiagnoses(patientUuid).then(function(response){var diagnosisMapper=new Bahmni.DiagnosisMapper($rootScope.diagnosisStatus),allDiagnoses=diagnosisMapper.mapDiagnoses(response.data);return{pastDiagnoses:diagnosisMapper.mapPastDiagnosis(allDiagnoses,encounterUuid),savedDiagnosesFromCurrentEncounter:diagnosisMapper.mapSavedDiagnosesFromCurrentEncounter(allDiagnoses,encounterUuid)}})},this.populateDiagnosisInformation=function(patientUuid,consultation){return this.getPastAndCurrentDiagnoses(patientUuid,consultation.encounterUuid).then(function(diagnosis){return consultation.pastDiagnoses=diagnosis.pastDiagnoses,consultation.savedDiagnosesFromCurrentEncounter=diagnosis.savedDiagnosesFromCurrentEncounter,consultation})},this.getPatientDiagnosis=function(patientUuid){var url=Bahmni.Common.Constants.bahmniDiagnosisUrl;return $http.get(url,{params:{patientUuid:patientUuid}})}}]),angular.module("bahmni.common.domain").service("conditionsService",["$http",function($http){this.save=function(conditions,patientUuid){var conditionsToBeSaved=_.reject(conditions,function(condition){return null===condition.onSetDate||Number.isInteger(condition.onSetDate)}),body=_.map(conditionsToBeSaved,function(condition){return{uuid:condition.uuid,patientUuid:patientUuid,concept:condition.concept,conditionNonCoded:condition.conditionNonCoded,status:condition.status,onSetDate:condition.onSetDate,endDate:condition.endDate,endReason:condition.endReason,additionalDetail:condition.additionalDetail,voided:condition.voided,voidReason:condition.voidReason}});return $http.post(Bahmni.Common.Constants.conditionUrl,body,{withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}})},this.getConditionHistory=function(patientUuid){var params={patientUuid:patientUuid};return $http.get(Bahmni.Common.Constants.conditionHistoryUrl,{params:params,headers:{withCredentials:!0}})},this.getFollowUpConditionConcept=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{params:{name:Bahmni.Common.Constants.followUpConditionConcept,v:"custom:(uuid,name:(name))"},cache:!0})};var getLatestActiveCondition=function(conditionHistories,latestCondition){var conditionHistory=_.find(conditionHistories,{conceptUuid:latestCondition.concept.uuid,conditionNonCoded:latestCondition.conditionNonCoded});return Bahmni.Common.Domain.Conditions.getPreviousActiveCondition(latestCondition,conditionHistory.conditions)};this.getConditions=function(patientUuid){return this.getConditionHistory(patientUuid).then(function(response){var conditionHistories=response.data,conditions=Bahmni.Common.Domain.Conditions.fromConditionHistories(conditionHistories);return _.forEach(conditions,function(condition){condition.activeSince=getLatestActiveCondition(conditionHistories,condition).onSetDate}),conditions})}}]),angular.module("bahmni.common.orders").service("orderTypeService",["$http",function($http){var self=this;self.orderTypes=[],self.loadAll=function(){return $http.get("/openmrs/ws/rest/v1/ordertype",{params:{v:"custom:(uuid,display,conceptClasses:(uuid,display,name))"}}).then(function(response){return self.orderTypes=response.data.results,self.orderTypes})},self.getOrderTypeUuid=function(orderTypeName){return _.result(_.find(self.orderTypes,{display:orderTypeName}),"uuid")}}]),angular.module("bahmni.common.patient").service("patientService",["$http","sessionService","appService",function($http,sessionService,appService){this.getPatient=function(uuid,rep){return rep||(rep="full"),$http.get(Bahmni.Common.Constants.openmrsUrl+"/ws/rest/v1/patient/"+uuid,{method:"GET",params:{v:rep},withCredentials:!0})},this.getRelationships=function(patientUuid){return $http.get(Bahmni.Common.Constants.openmrsUrl+"/ws/rest/v1/relationship",{method:"GET",params:{person:patientUuid,v:"full"},withCredentials:!0})},this.findPatients=function(params){return $http.get(Bahmni.Common.Constants.sqlUrl,{method:"GET",params:params,withCredentials:!0})},this.search=function(query,offset,identifier){offset=offset||0,identifier=identifier||query;var searchParams={filterOnAllIdentifiers:!0,q:query,startIndex:offset,identifier:identifier,loginLocationUuid:sessionService.getLoginLocationUuid()},filterOutAttributeForAllSearch=appService.getAppDescriptor().getConfigValue("filterOutAttributeForAllSearch")||[];return filterOutAttributeForAllSearch&&filterOutAttributeForAllSearch.length>0&&(searchParams.attributeToFilterOut=filterOutAttributeForAllSearch[0].attrName,searchParams.attributeValueToFilterOut=filterOutAttributeForAllSearch[0].attrValue),$http.get(Bahmni.Common.Constants.bahmniCommonsSearchUrl+"/patient/lucene",{method:"GET",params:searchParams,withCredentials:!0})},this.getPatientContext=function(patientUuid,programUuid,personAttributes,programAttributes,patientIdentifiers){return $http.get("/openmrs/ws/rest/v1/bahmnicore/patientcontext",{params:{patientUuid:patientUuid,programUuid:programUuid,personAttributes:personAttributes,programAttributes:programAttributes,patientIdentifiers:patientIdentifiers},withCredentials:!0})}}]),angular.module("bahmni.common.domain").factory("locationService",["$http","$bahmniCookieStore",function($http,$bahmniCookieStore){var getAllByTag=function(tags,operator){return $http.get(Bahmni.Common.Constants.locationUrl,{params:{s:"byTags",tags:tags||"",v:"default",operator:operator||"ALL"},cache:!0})},getByUuid=function(locationUuid){return $http.get(Bahmni.Common.Constants.locationUrl+"/"+locationUuid,{cache:!0}).then(function(response){return response.data})};return{getAllByTag:getAllByTag,getLoggedInLocation:function(){var cookie=$bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName);return getByUuid(cookie.uuid)},getByUuid:getByUuid,getVisitLocation:function(locationUuid){return $http.get(Bahmni.Common.Constants.bahmniVisitLocationUrl+"/"+locationUuid,{headers:{Accept:"application/json"}})},getFacilityVisitLocation:function(){var cookie=$bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName);return $http.get(Bahmni.Common.Constants.bahmniFacilityLocationUrl+"/"+cookie.uuid,{cache:!0}).then(function(response){return response.data})}}}]),angular.module("bahmni.clinical").service("cdssService",["drugService","$rootScope",function(drugService,$rootScope){function createPatientResource(patient){return{resource:{resourceType:"Patient",id:patient.uuid}}}var createMedicationRequest=function(medication,patientUuid,conceptSource){return extractCodeInfo(medication,conceptSource).then(function(coding){return{resource:{resourceType:"MedicationRequest",id:medication.uuid,status:"active",intent:"order",subject:{reference:"Patient/"+patientUuid},medicationCodeableConcept:{id:medication.drug.uuid,coding:coding,text:medication.drugNameDisplay},dosageInstruction:[{text:angular.toJson({instructions:medication.instructions}),timing:{event:[medication.effectiveStartDate],repeat:{duration:medication.durationInDays,durationUnit:"d"},code:{coding:[{code:medication.drug.uuid,display:medication.uniformDosingType.frequency}],text:medication.uniformDosingType.frequency}},asNeededBoolean:medication.asNeeded,doseAndRate:[{doseQuantity:{value:medication.uniformDosingType.dose,unit:medication.doseUnits,code:medication.drug.uuid}}],route:{coding:[{system:conceptSource,code:"",display:medication.route}],text:medication.route}}]}}})},extractConditionInfo=function(condition){var uuid=condition.concept.uuid.split("/"),code=uuid[uuid.length-1];return uuid.pop(),{code:code,system:uuid.join("/"),display:condition.concept.name}},extractCodeInfo=function(medication,conceptSource){if(medication.drug.drugReferenceMaps&&medication.drug.drugReferenceMaps.length>0){var drugReferenceMap=medication.drug.drugReferenceMaps[0];return conceptSource?Promise.resolve([{system:conceptSource,code:drugReferenceMap.conceptReferenceTerm&&drugReferenceMap.conceptReferenceTerm.display&&drugReferenceMap.conceptReferenceTerm.display.split(":")[1].trim(),display:medication.drug.name},{code:medication.drug.uuid,system:"https://fhir.openmrs.org",display:medication.drug.name}]):drugService.getDrugConceptSourceMapping(medication.drug.uuid).then(function(response){var bundle=response.data,code=bundle.entry&&bundle.entry.length>0&&bundle.entry[0].resource.code,conceptCode=code.coding.find(function(coding){return coding.system});return conceptCode?(localStorage.setItem("conceptSource",conceptCode.system),conceptSource=conceptCode.system,[{system:conceptSource,code:drugReferenceMap.conceptReferenceTerm&&drugReferenceMap.conceptReferenceTerm.display&&drugReferenceMap.conceptReferenceTerm.display.split(":")[1].trim(),display:medication.drug.name},{code:medication.drug.uuid,system:"https://fhir.openmrs.org",display:medication.drug.name}]):[{code:medication.drug.uuid,display:medication.drug.name,system:"https://fhir.openmrs.org"}]})}return Promise.resolve([{code:medication.drug.uuid,display:medication.drug.name,system:"https://fhir.openmrs.org"}])},createConditionResource=function(condition,patientUuid,isDiagnosis){var conceptLimitIndex=isDiagnosis?-1:condition.concept.uuid.lastIndexOf("/"),conditionStatus=condition.status||condition.diagnosisStatus||condition.certainty,activeConditions=["CONFIRMED","PRESUMED","ACTIVE"],status=!conditionStatus||activeConditions.indexOf(conditionStatus)>-1?"active":"inactive",conditionCoding=condition.concept?extractConditionInfo(condition):{system:isDiagnosis?condition.codedAnswer.conceptSystem:conceptLimitIndex>-1?condition.concept.uuid.substring(0,conceptLimitIndex)||"":"",code:isDiagnosis?condition.codedAnswer.uuid:conceptLimitIndex>-1?condition.concept.uuid.substring(conceptLimitIndex+1):condition.concept.uuid,display:isDiagnosis?condition.codedAnswer.name:condition.concept.name},conditionResource={resourceType:"Condition",id:condition.uuid,clinicalStatus:{coding:[{code:status,display:status,system:"http://terminology.hl7.org/CodeSystem/condition-clinical"}]},code:{coding:[conditionCoding],text:isDiagnosis?condition.codedAnswer.name:condition.concept.name},subject:{reference:"Patient/"+patientUuid}};return"number"===angular.isNumber(condition.onSetDate)&&(conditionResource.onsetDateTime=new Date(condition.onSetDate).toLocaleDateString("en-CA")),conditionResource.onsetDateTime||delete conditionResource.onsetDateTime,{resource:conditionResource}},createFhirBundle=function(patient,conditions,medications,diagnosis,conceptSource){var encounterResource=conditions.filter(function(condition){return!condition.uuid}).map(function(condition){return createConditionResource(condition,patient.uuid,!1)});return encounterResource=encounterResource.concat(diagnosis.map(function(condition){return createConditionResource(condition,patient.uuid,!0)})),medications=medications.filter(function(medication){return angular.isDefined(medication.include)&&medication.include||void 0===medication.include}),Promise.all(medications.map(function(medication){return createMedicationRequest(medication,patient.uuid,conceptSource).then(function(medicationResource){return medicationResource})})).then(function(medicationResources){var bundleResource={resourceType:"Bundle",type:"collection",entry:[]};if(0===medicationResources.length&&0===encounterResource.length){var patientResource=createPatientResource(patient);return bundleResource.entry=bundleResource.entry.concat(patientResource),bundleResource}return bundleResource.entry=bundleResource.entry.concat(encounterResource,medicationResources),bundleResource})},getAlerts=function(cdssEnabled,consultation,patient){if(cdssEnabled){var consultationData=angular.copy(consultation);consultationData.patient=patient;var orderSetTreatments=consultationData.newlyAddedTabTreatments?consultationData.newlyAddedTabTreatments.allMedicationTabConfig.orderSetTreatments:[],drafts=consultationData.newlyAddedTabTreatments?consultationData.newlyAddedTabTreatments.allMedicationTabConfig.treatments:[];consultationData.draftDrug=drafts.concat(orderSetTreatments);var params=createParams(consultationData);createFhirBundle(params.patient,params.conditions,params.medications,params.diagnosis).then(function(bundle){drugService.sendDiagnosisDrugBundle(bundle).then(function(response){var alerts=response.data,existingAlerts=$rootScope.cdssAlerts||[];$rootScope.cdssAlerts=addNewAlerts(alerts,existingAlerts,bundle)})})}},createParams=function(consultationData){return{patient:consultationData.patient,conditions:consultationData.condition&&consultationData.condition.concept.uuid?consultationData.conditions.concat(consultationData.condition):consultationData.conditions,diagnosis:consultationData.newlyAddedDiagnoses&&consultationData.newlyAddedDiagnoses.filter(function(diagnosis){return diagnosis.codedAnswer&&diagnosis.codedAnswer.name})||[],medications:consultationData.draftDrug}},getAlertMedicationCodes=function(alert){if(alert.referenceMedications){var codeList=[];return alert.referenceMedications.forEach(function(med){var extractedCodes=med.coding.map(function(coding){return coding.code});codeList=codeList.concat(extractedCodes)}),codeList}return[]},getAlertConditionCodes=function(alert){if(alert.referenceConditions){var codeList=[];return alert.referenceConditions.forEach(function(med){var extractedCodes=med.coding.filter(function(cond){return!localStorage.getItem("conceptSource")||cond.system.includes(localStorage.getItem("conceptSource"))}).map(function(coding){return coding.code});codeList=codeList.concat(extractedCodes)}),codeList}return[]},getMedicationCodesFromEntry=function(entry){return entry.resource.medicationCodeableConcept.coding[0].code},getConditionCodesFromEntry=function(entry){return entry.resource.code.coding[0].code},isMedicationRequest=function(entry){return"MedicationRequest"===entry.resource.resourceType},isCondition=function(entry){return"Condition"===entry.resource.resourceType},checkAlertBundleMatch=function(alert,bundle){var alertMedicationCodes=getAlertMedicationCodes(alert),alertConditionCodes=getAlertConditionCodes(alert),bundleMedicationCodes=bundle.entry.filter(isMedicationRequest).map(getMedicationCodesFromEntry),bundleConditionCodes=bundle.entry.filter(isCondition).map(getConditionCodesFromEntry);return alertMedicationCodes.some(function(code){return bundleMedicationCodes.includes(code)})||alertConditionCodes.some(function(code){return bundleConditionCodes.includes(code)})},addNewAlerts=function(newAlerts,currentAlerts,bundle){var activeAlerts=newAlerts.map(function(item){return checkAlertBundleMatch(item,bundle)&&(item.isActive=!0),item.detail=item.detail.indexOf("\n")>-1?marked.parse(item.detail):item.detail,item});return!currentAlerts||currentAlerts&&0===currentAlerts.length?activeAlerts:activeAlerts.map(function(alert){var getAlert=currentAlerts.find(function(currentAlert){return currentAlert.uuid===alert.uuid});return getAlert&&(alert.indicator!==getAlert.indicator||"High Dosage"===alert.alertType&&alert.summary.match(/\d+/g).sort().join("")!==getAlert.summary.match(/\d+/g).sort().join("")?alert.isActive=!0:isSubset(getAlertConditionCodes(getAlert),getAlertConditionCodes(alert))&&isSubset(getAlertMedicationCodes(getAlert),getAlertMedicationCodes(alert))?alert.isActive=getAlert.isActive:alert.isActive=!0),alert})},isSubset=function(oldList,newList){return newList.every(function(newItem){return oldList.includes(newItem)})};return{createFhirBundle:createFhirBundle,createParams:createParams,addNewAlerts:addNewAlerts,sortInteractionsByStatus:function(alerts){var order={critical:0,warning:1,info:2};return alerts.sort(function(a,b){return order[a.indicator]-order[b.indicator]})},getAlerts:getAlerts}}]),angular.module("bahmni.clinical").factory("labOrderResultService",["$http","$q","configurationService",function($http,$q,configurationService){var allTestsAndPanelsConcept={};configurationService.getConfigurations(["allTestsAndPanelsConcept"]).then(function(configurations){allTestsAndPanelsConcept=configurations.allTestsAndPanelsConcept.results[0]});var sanitizeData=function(labOrderResults){labOrderResults.forEach(function(result){result.accessionDateTime=Bahmni.Common.Util.DateUtil.parse(result.accessionDateTime),result.hasRange=result.minNormal||result.maxNormal})},groupLabOrdersByPanel=function(labOrders){var panels={},accessionGroup=[];return labOrders&&labOrders.forEach(function(labOrder){labOrder.panelName?(panels[labOrder.panelName]=panels[labOrder.panelName]||{accessionDateTime:labOrder.accessionDateTime,orderName:labOrder.panelName,tests:[],isPanel:!0},panels[labOrder.panelName].tests.push(labOrder)):(labOrder.isPanel=!1,labOrder.orderName=labOrder.testName,accessionGroup.push(labOrder))}),_.values(panels).forEach(function(value){accessionGroup.push(value)}),accessionGroup},groupByPanel=function(accessions){var grouped=[];return accessions.forEach(function(labOrders){grouped.push(groupLabOrdersByPanel(labOrders))}),grouped},flattened=function(accessions){return accessions.map(function(results){return _(results).map(function(result){return!0===result.isPanel?[result,result.tests]:result}).flattenDeep().value()})},flattenedTabularData=function(results){return _(results).map(function(result){return!0===result.isPanel?[result,result.tests]:result}).flattenDeep().value()},transformGroupSort=function(results,initialAccessionCount,latestAccessionCount,sortResultColumnsLatestFirst,groupOrdersByPanel){var labOrderResults=results.results;sanitizeData(labOrderResults);var accessionConfig={initialAccessionCount:initialAccessionCount,latestAccessionCount:latestAccessionCount},tabularResult=new Bahmni.Clinical.TabularLabOrderResults(results.tabularResult,accessionConfig,sortResultColumnsLatestFirst);groupOrdersByPanel&&(tabularResult.tabularResult.orders=groupLabOrdersByPanel(tabularResult.tabularResult.orders));var accessions=_.groupBy(labOrderResults,function(labOrderResult){return labOrderResult.accessionUuid});if(accessions=_.sortBy(accessions,function(accession){return accession[0].accessionDateTime}),accessionConfig.initialAccessionCount||accessionConfig.latestAccessionCount){var initial=_.take(accessions,accessionConfig.initialAccessionCount||0),latest=_.takeRight(accessions,accessionConfig.latestAccessionCount||0);accessions=_.union(initial,latest)}return accessions.reverse(),{accessions:groupByPanel(accessions),tabularResult:tabularResult}};return{getAllForPatient:function(params){var deferred=$q.defer(),paramsToBeSent={};return params.visitUuids?paramsToBeSent.visitUuids=params.visitUuids:(params.patientUuid||deferred.reject("patient uuid is mandatory"),paramsToBeSent.patientUuid=params.patientUuid,0!==params.numberOfVisits&&(paramsToBeSent.numberOfVisits=params.numberOfVisits)),$http.get(Bahmni.Common.Constants.bahmniLabOrderResultsUrl,{method:"GET",params:paramsToBeSent,withCredentials:!0}).then(function(response){var results=transformGroupSort(response.data,params.initialAccessionCount,params.latestAccessionCount,params.sortResultColumnsLatestFirst,params.groupOrdersByPanel),sortedConceptSet=new Bahmni.Clinical.ConceptWeightBasedSorter(allTestsAndPanelsConcept);results.tabularResult.tabularResult.orders=sortedConceptSet.sortTestResults(results.tabularResult.tabularResult.orders);var resultObject={labAccessions:flattened(results.accessions.map(sortedConceptSet.sortTestResults)),tabular:results.tabularResult};params.groupOrdersByPanel&&(resultObject.tabular.tabularResult.orders=flattenedTabularData(resultObject.tabular.tabularResult.orders)),deferred.resolve(resultObject)}),deferred.promise}}}]),angular.module("bahmni.common.domain").factory("configurationService",["$http","$q",function($http,$q){var configurationFunctions={};configurationFunctions.encounterConfig=function(){return $http.get(Bahmni.Common.Constants.encounterConfigurationUrl,{params:{callerContext:"REGISTRATION_CONCEPTS"},withCredentials:!0})},configurationFunctions.patientConfig=function(){return $http.get(Bahmni.Common.Constants.patientConfigurationUrl,{withCredentials:!0})},configurationFunctions.patientAttributesConfig=function(){return $http.get(Bahmni.Common.Constants.personAttributeTypeUrl,{params:{v:"custom:(uuid,name,sortWeight,description,format,concept)"},withCredentials:!0})},configurationFunctions.dosageFrequencyConfig=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name,answers)",name:Bahmni.Common.Constants.dosageFrequencyConceptName},withCredentials:!0})},configurationFunctions.dosageInstructionConfig=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name,answers)",name:Bahmni.Common.Constants.dosageInstructionConceptName},withCredentials:!0})},configurationFunctions.stoppedOrderReasonConfig=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name,answers)",name:Bahmni.Common.Constants.stoppedOrderReasonConceptName},withCredentials:!0})},configurationFunctions.consultationNoteConfig=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name,answers)",name:Bahmni.Common.Constants.consultationNoteConceptName},withCredentials:!0})},configurationFunctions.radiologyObservationConfig=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name)",name:Bahmni.Common.Constants.radiologyResultConceptName},withCredentials:!0})},configurationFunctions.labOrderNotesConfig=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name)",name:Bahmni.Common.Constants.labOrderNotesConcept},withCredentials:!0})},configurationFunctions.defaultEncounterType=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{params:{property:"bahmni.encounterType.default"},withCredentials:!0,transformResponse:[function(data){return data}]})},configurationFunctions.radiologyImpressionConfig=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name)",name:Bahmni.Common.Constants.impressionConcept},withCredentials:!0})},configurationFunctions.addressLevels=function(){return $http.get(Bahmni.Common.Constants.openmrsUrl+"/module/addresshierarchy/ajax/getOrderedAddressHierarchyLevels.form",{withCredentials:!0})},configurationFunctions.allTestsAndPanelsConcept=function(){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{method:"GET",params:{v:"custom:(uuid,name:(uuid,name),setMembers:(uuid,name:(uuid,name)))",name:Bahmni.Common.Constants.allTestsAndPanelsConceptName},withCredentials:!0})},configurationFunctions.identifierTypesConfig=function(){return $http.get(Bahmni.Common.Constants.idgenConfigurationURL,{withCredentials:!0})},configurationFunctions.genderMap=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{method:"GET",params:{property:"mrs.genders"},withCredentials:!0})},configurationFunctions.relationshipTypeMap=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{method:"GET",params:{property:"bahmni.relationshipTypeMap"},withCredentials:!0})},configurationFunctions.relationshipTypeConfig=function(){return $http.get(Bahmni.Common.Constants.relationshipTypesUrl,{withCredentials:!0,params:{v:"custom:(aIsToB,bIsToA,uuid)"}})},configurationFunctions.loginLocationToVisitTypeMapping=function(){var url=Bahmni.Common.Constants.entityMappingUrl;return $http.get(url,{params:{mappingType:"loginlocation_visittype",s:"byEntityAndMappingType"}})},configurationFunctions.enableAuditLog=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{method:"GET",params:{property:"bahmni.enableAuditLog"},withCredentials:!0})},configurationFunctions.helpDeskNumber=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{params:{property:"clinic.helpDeskNumber"},withCredentials:!0,transformResponse:[function(data){return data}]})},configurationFunctions.prescriptionEmailToggle=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{params:{property:"bahmni.enableEmailPrescriptionOption"},withCredentials:!0,transformResponse:[function(data){return data}]})},configurationFunctions.quickLogoutComboKey=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{params:{property:"bahmni.quickLogoutComboKey"},withCredentials:!0,transformResponse:[function(data){return data}]})},configurationFunctions.contextCookieExpirationTimeInMinutes=function(){return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{params:{property:"bahmni.contextCookieExpirationTimeInMinutes"},withCredentials:!0,transformResponse:[function(data){return data}]})};var existingPromises={},configurations={};return{getConfigurations:function(configurationNames){var configurationsPromiseDefer=$q.defer(),promises=[];return configurationNames.forEach(function(configurationName){existingPromises[configurationName]||(existingPromises[configurationName]=configurationFunctions[configurationName]().then(function(response){configurations[configurationName]=response.data}),promises.push(existingPromises[configurationName]))}),$q.all(promises).then(function(){configurationsPromiseDefer.resolve(configurations)}),configurationsPromiseDefer.promise}}}]),angular.module("bahmni.common.appFramework").service("loadConfigService",["$http",function($http){this.loadConfig=function(url){
return $http.get(url,{withCredentials:!0})}}]),angular.module("bahmni.common.domain").service("encounterService",["$http","$q","$rootScope","configurations","$bahmniCookieStore",function($http,$q,$rootScope,configurations,$bahmniCookieStore){function isObsConceptClassVideoOrImage(obs){return"Video"===obs.concept.conceptClass||"Image"===obs.concept.conceptClass}this.buildEncounter=function(encounter){encounter.observations=encounter.observations||[],encounter.observations.forEach(function(obs){stripExtraConceptInfo(obs)});var bacterilogyMembers=getBacteriologyGroupMembers(encounter);bacterilogyMembers=bacterilogyMembers.reduce(function(mem1,mem2){return mem1.concat(mem2)},[]),bacterilogyMembers.forEach(function(mem){deleteIfImageOrVideoObsIsVoided(mem)}),encounter.providers=encounter.providers||[];var providerData=$bahmniCookieStore.get(Bahmni.Common.Constants.grantProviderAccessDataCookieName);return _.isEmpty(encounter.providers)&&(providerData&&providerData.uuid?encounter.providers.push({uuid:providerData.uuid}):$rootScope.currentProvider&&$rootScope.currentProvider.uuid&&encounter.providers.push({uuid:$rootScope.currentProvider.uuid})),encounter};var getBacteriologyGroupMembers=function(encounter){var addBacteriologyMember=function(bacteriologyGroupMembers,member){return bacteriologyGroupMembers=member.groupMembers.length?bacteriologyGroupMembers.concat(member.groupMembers):bacteriologyGroupMembers.concat(member)};return encounter.extensions&&encounter.extensions.mdrtbSpecimen?encounter.extensions.mdrtbSpecimen.map(function(observation){var bacteriologyGroupMembers=[];return observation.sample.additionalAttributes&&observation.sample.additionalAttributes.groupMembers.forEach(function(member){bacteriologyGroupMembers=addBacteriologyMember(bacteriologyGroupMembers,member)}),observation.report.results&&observation.report.results.groupMembers.forEach(function(member){bacteriologyGroupMembers=addBacteriologyMember(bacteriologyGroupMembers,member)}),bacteriologyGroupMembers}):[]},getDefaultEncounterType=function(){var url=Bahmni.Common.Constants.encounterTypeUrl;return $http.get(url+"/"+configurations.defaultEncounterType()).then(function(response){return response.data})},getEncounterTypeBasedOnLoginLocation=function(loginLocationUuid){return $http.get(Bahmni.Common.Constants.entityMappingUrl,{params:{entityUuid:loginLocationUuid,mappingType:"location_encountertype",s:"byEntityAndMappingType"},withCredentials:!0})},getEncounterTypeBasedOnProgramUuid=function(programUuid){return $http.get(Bahmni.Common.Constants.entityMappingUrl,{params:{entityUuid:programUuid,mappingType:"program_encountertype",s:"byEntityAndMappingType"},withCredentials:!0})},getDefaultEncounterTypeIfMappingNotFound=function(entityMappings){var encounterType=entityMappings.data.results[0]&&entityMappings.data.results[0].mappings[0];return encounterType||(encounterType=getDefaultEncounterType()),encounterType};this.getEncounterType=function(programUuid,loginLocationUuid){return programUuid?getEncounterTypeBasedOnProgramUuid(programUuid).then(function(response){return getDefaultEncounterTypeIfMappingNotFound(response)}):loginLocationUuid?getEncounterTypeBasedOnLoginLocation(loginLocationUuid).then(function(response){return getDefaultEncounterTypeIfMappingNotFound(response)}):getDefaultEncounterType()},this.create=function(encounter){return encounter=this.buildEncounter(encounter),$http.post(Bahmni.Common.Constants.bahmniEncounterUrl,encounter,{withCredentials:!0})},this.delete=function(encounterUuid,reason){return $http.delete(Bahmni.Common.Constants.bahmniEncounterUrl+"/"+encounterUuid,{params:{reason:reason}})};var deleteIfImageOrVideoObsIsVoided=function(obs){if(obs.voided&&obs.groupMembers&&!obs.groupMembers.length&&obs.value&&isObsConceptClassVideoOrImage(obs)){var url=Bahmni.Common.Constants.RESTWS_V1+"/bahmnicore/visitDocument?filename="+obs.value;$http.delete(url,{withCredentials:!0})}},stripExtraConceptInfo=function(obs){deleteIfImageOrVideoObsIsVoided(obs),obs.concept={uuid:obs.concept.uuid,name:obs.concept.name,dataType:obs.concept.dataType},obs.groupMembers=obs.groupMembers||[],obs.groupMembers.forEach(function(groupMember){stripExtraConceptInfo(groupMember)})},searchWithoutEncounterDate=function(visitUuid){return $http.post(Bahmni.Common.Constants.bahmniEncounterUrl+"/find",{visitUuids:[visitUuid],includeAll:Bahmni.Common.Constants.includeAllObservations},{withCredentials:!0})};this.search=function(visitUuid,encounterDate){return encounterDate?$http.get(Bahmni.Common.Constants.emrEncounterUrl,{params:{visitUuid:visitUuid,encounterDate:encounterDate,includeAll:Bahmni.Common.Constants.includeAllObservations},withCredentials:!0}):searchWithoutEncounterDate(visitUuid)},this.find=function(params){return $http.post(Bahmni.Common.Constants.bahmniEncounterUrl+"/find",params,{withCredentials:!0})},this.findByEncounterUuid=function(encounterUuid,params){return params=params||{includeAll:!0},$http.get(Bahmni.Common.Constants.bahmniEncounterUrl+"/"+encounterUuid,{params:params,withCredentials:!0})},this.getEncountersForEncounterType=function(patientUuid,encounterTypeUuid){return $http.get(Bahmni.Common.Constants.encounterUrl,{params:{patient:patientUuid,order:"desc",encounterType:encounterTypeUuid,v:"custom:(uuid,provider,visit:(uuid,startDatetime,stopDatetime),obs:(uuid,concept:(uuid,name),groupMembers:(id,uuid,obsDatetime,value,comment)))"},withCredentials:!0})},this.getDigitized=function(patientUuid){var patientDocumentEncounterTypeUuid=configurations.encounterConfig().getPatientDocumentEncounterTypeUuid();return $http.get(Bahmni.Common.Constants.encounterUrl,{params:{patient:patientUuid,encounterType:patientDocumentEncounterTypeUuid,v:"custom:(uuid,obs:(uuid))"},withCredentials:!0})},this.discharge=function(encounterData){var encounter=this.buildEncounter(encounterData);return $http.post(Bahmni.Common.Constants.dischargeUrl,encounter,{withCredentials:!0})}}]),angular.module("bahmni.clinical").service("diseaseTemplateService",["$http","$q","clinicalAppConfigService",function($http,$q,clinicalAppConfigService){this.getLatestDiseaseTemplates=function(patientUuid,diseaseTemplates,startDate,endDate){var url=Bahmni.Common.Constants.diseaseTemplateUrl,params={patientUuid:patientUuid,diseaseTemplateConfigList:diseaseTemplates};params.startDate=startDate&&moment(startDate).format(Bahmni.Common.Constants.ServerDateTimeFormat),params.endDate=endDate&&moment(endDate).format(Bahmni.Common.Constants.ServerDateTimeFormat);var deferred=$q.defer();return $http.post(url,params,{withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(response){var diseaseTemplates=mapDiseaseTemplates(response.data,clinicalAppConfigService.getAllConceptsConfig());deferred.resolve(diseaseTemplates)}),deferred.promise},this.getAllDiseaseTemplateObs=function(patientUuid,diseaseName,startDate,endDate){var url=Bahmni.Common.Constants.AllDiseaseTemplateUrl,params={patientUuid:patientUuid,diseaseTemplateConfigList:[{templateName:diseaseName}]};params.startDate=startDate&&moment(startDate).format(Bahmni.Common.Constants.ServerDateTimeFormat),params.endDate=endDate&&moment(endDate).format(Bahmni.Common.Constants.ServerDateTimeFormat);var deferred=$q.defer();return $http.post(url,params,{withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(diseaseTemplateResponse){var diseaseTemplates=mapDiseaseTemplates([diseaseTemplateResponse.data],clinicalAppConfigService.getAllConceptsConfig());deferred.resolve(diseaseTemplates[0])}),deferred.promise};var mapDiseaseTemplates=function(diseaseTemplates,allConceptsConfig){var mappedDiseaseTemplates=[];return diseaseTemplates.forEach(function(diseaseTemplate){mappedDiseaseTemplates.push(new Bahmni.Clinical.DiseaseTemplateMapper(diseaseTemplate,allConceptsConfig))}),mappedDiseaseTemplates}}]),angular.module("bahmni.common.domain").service("observationsService",["$http",function($http){this.fetch=function(patientUuid,conceptNames,scope,numberOfVisits,visitUuid,obsIgnoreList,filterObsWithOrders,patientProgramUuid){var params={concept:conceptNames};return obsIgnoreList&&(params.obsIgnoreList=obsIgnoreList),null!=filterObsWithOrders&&(params.filterObsWithOrders=filterObsWithOrders),visitUuid?(params.visitUuid=visitUuid,params.scope=scope):(params.patientUuid=patientUuid,params.numberOfVisits=numberOfVisits,params.scope=scope,params.patientProgramUuid=patientProgramUuid),$http.get(Bahmni.Common.Constants.observationsUrl,{params:params,withCredentials:!0})},this.getByUuid=function(observationUuid){return $http.get(Bahmni.Common.Constants.observationsUrl,{params:{observationUuid:observationUuid},withCredentials:!0})},this.getRevisedObsByUuid=function(observationUuid){return $http.get(Bahmni.Common.Constants.observationsUrl,{params:{observationUuid:observationUuid,revision:"latest"},withCredentials:!0})},this.fetchForEncounter=function(encounterUuid,conceptNames){return $http.get(Bahmni.Common.Constants.observationsUrl,{params:{encounterUuid:encounterUuid,concept:conceptNames},withCredentials:!0})},this.fetchForPatientProgram=function(patientProgramUuid,conceptNames,scope,obsIgnoreList){return $http.get(Bahmni.Common.Constants.observationsUrl,{params:{patientProgramUuid:patientProgramUuid,concept:conceptNames,scope:scope,obsIgnoreList:obsIgnoreList},withCredentials:!0})},this.getObsRelationship=function(targetObsUuid){return $http.get(Bahmni.Common.Constants.obsRelationshipUrl,{params:{targetObsUuid:targetObsUuid},withCredentials:!0})},this.getObsInFlowSheet=function(patientUuid,conceptSet,groupByConcept,orderByConcept,conceptNames,numberOfVisits,initialCount,latestCount,groovyExtension,startDate,endDate,patientProgramUuid,formNames){var params={patientUuid:patientUuid,conceptSet:conceptSet,groupByConcept:groupByConcept,orderByConcept:orderByConcept,conceptNames:conceptNames,numberOfVisits:numberOfVisits,initialCount:initialCount,latestCount:latestCount,name:groovyExtension,startDate:Bahmni.Common.Util.DateUtil.parseLongDateToServerFormat(startDate),endDate:Bahmni.Common.Util.DateUtil.parseLongDateToServerFormat(endDate),enrollment:patientProgramUuid,formNames:formNames};return $http.get(Bahmni.Common.Constants.observationsUrl+"/flowSheet",{params:params,withCredentials:!0})}}]),angular.module("bahmni.common.conceptSet").factory("conceptSetService",["$http","$q","$bahmniTranslate",function($http,$q,$bahmniTranslate){return{getConcept:function(params,cache){return $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl,{params:params,cache:cache})},getComputedValue:function(encounterData){var url=Bahmni.Common.Constants.encounterModifierUrl;return $http.post(url,encounterData,{withCredentials:!0,headers:{Accept:"application/json","Content-Type":"application/json"}})},getObsTemplatesForProgram:function(programUuid){var url=Bahmni.Common.Constants.entityMappingUrl;return $http.get(url,{params:{entityUuid:programUuid,mappingType:"program_obstemplate",s:"byEntityAndMappingType"}})}}}]),Bahmni.Common.Util.DateTimeFormatter={getDateWithoutTime:function(datetime){return datetime?moment(datetime).format("YYYY-MM-DD"):null}},angular.module("bahmni.common.logging").service("loggingService",function(){return{log:function(errorDetails){$.ajax({type:"POST",url:"/log",contentType:"application/json",data:angular.toJson(errorDetails)})}}}),angular.module("bahmni.common.logging").service("auditLogService",["$http","$translate","configurationService",function($http,$translate,configurationService){var DateUtil=Bahmni.Common.Util.DateUtil,convertToLocalDate=function(date){var localDate=DateUtil.parseLongDateToServerFormat(date);return DateUtil.getDateTimeInSpecifiedFormat(localDate,"MMMM Do, YYYY [at] h:mm:ss A")};this.getLogs=function(params){return params=params||{},$http.get(Bahmni.Common.Constants.auditLogUrl,{params:params}).then(function(response){return response.data.map(function(log){log.dateCreated=convertToLocalDate(log.dateCreated);var entity=log.message?log.message.split("~")[1]:void 0;return log.params=entity?JSON.parse(entity):entity,log.message=log.message.split("~")[0],log.displayMessage=$translate.instant(log.message,log),log})})},this.log=function(patientUuid,eventType,messageParams,module){return configurationService.getConfigurations(["enableAuditLog"]).then(function(result){if(result.enableAuditLog){var params={};return params.patientUuid=patientUuid,params.eventType=Bahmni.Common.AuditLogEventDetails[eventType].eventType,params.message=Bahmni.Common.AuditLogEventDetails[eventType].message,params.message=messageParams?params.message+"~"+JSON.stringify(messageParams):params.message,params.module=module,$http.post(Bahmni.Common.Constants.auditLogUrl,params,{withCredentials:!0})}})}}]),angular.module("bahmni.common.util").factory("allergyService",["$http","appService",function($http,appService){var getAllergyForPatient=function(patientUuid){var patientAllergyURL=appService.getAppDescriptor().formatUrl(Bahmni.Common.Constants.patientAllergiesURL,{patientUuid:patientUuid});return $http.get(patientAllergyURL,{method:"GET",withCredentials:!0,cache:!1})};return{getAllergyForPatient:getAllergyForPatient,fetchAndProcessAllergies:function(patientUuid){return getAllergyForPatient(patientUuid).then(function(response){var allergies=response.data,allergiesList=[];return 200===response.status&&allergies.entry&&allergies.entry.length>0&&allergies.entry.forEach(function(allergy){allergy.resource.code.coding&&allergiesList.push(allergy.resource.code.coding[0].display)}),allergiesList.join(", ")})}}}]),angular.module("bahmni.clinical").factory("treatmentService",["$http","$q","$compile","$timeout","spinner","appService","$rootScope","transmissionService","$filter","printer",function($http,$q,$compile,$timeout,spinner,appService,$rootScope,transmissionService,$filter,printer){var createDrugOrder=function(drugOrder){return Bahmni.Clinical.DrugOrder.create(drugOrder)},getActiveDrugOrdersFromServer=function(patientUuid,startDate,endDate){return $http.get(Bahmni.Common.Constants.bahmniDrugOrderUrl+"/active",{params:{patientUuid:patientUuid,startDate:startDate,endDate:endDate},withCredentials:!0})},getPrescribedAndActiveDrugOrders=function(patientUuid,numberOfVisits,getOtherActive,visitUuids,startDate,endDate,getEffectiveOrdersOnly){return $http.get(Bahmni.Common.Constants.bahmniDrugOrderUrl+"/prescribedAndActive",{params:{patientUuid:patientUuid,numberOfVisits:numberOfVisits,getOtherActive:getOtherActive,visitUuids:visitUuids,startDate:startDate,endDate:endDate,getEffectiveOrdersOnly:getEffectiveOrdersOnly,preferredLocale:$rootScope.currentUser.userProperties.defaultLocale},withCredentials:!0}).success(function(response){for(var key in response)response[key]=response[key].map(createDrugOrder)})},getMedicationSchedulesForOrders=function(patientUuid,orderUuids){return $http.get(Bahmni.Common.Constants.medicationSchedulesForOrders,{params:{patientUuid:patientUuid,orderUuids:orderUuids},withCredentials:!0})},getConfig=function(){return $http.get(Bahmni.Common.Constants.drugOrderConfigurationUrl,{withCredentials:!0})},getProgramConfig=function(){return appService.getAppDescriptor()?appService.getAppDescriptor().getConfigValue("program")||{}:{}},getActiveDrugOrders=function(patientUuid,fromDate,toDate){var programConfig=getProgramConfig(),startDate=programConfig.showDetailsWithinDateRange?fromDate:null,endDate=programConfig.showDetailsWithinDateRange?toDate:null,deferred=$q.defer();return getActiveDrugOrdersFromServer(patientUuid,startDate,endDate).success(function(response){var activeDrugOrders=response.map(createDrugOrder);deferred.resolve(activeDrugOrders)}),deferred.promise},getPrescribedDrugOrders=function(patientUuid,includeActiveVisit,numberOfVisits,fromDate,toDate){var programConfig=getProgramConfig(),startDate=programConfig.showDetailsWithinDateRange?fromDate:null,endDate=programConfig.showDetailsWithinDateRange?toDate:null,deferred=$q.defer();return $http.get(Bahmni.Common.Constants.bahmniDrugOrderUrl,{method:"GET",params:{patientUuid:patientUuid,numberOfVisits:numberOfVisits,includeActiveVisit:includeActiveVisit,startDate:startDate,endDate:endDate},withCredentials:!0}).success(function(response){var activeDrugOrders=response.map(createDrugOrder);deferred.resolve(activeDrugOrders)}),deferred.promise},getNonCodedDrugConcept=function(){var deferred=$q.defer();return $http.get(Bahmni.Common.Constants.globalPropertyUrl,{method:"GET",params:{property:"drugOrder.drugOther"},withCredentials:!0,headers:{Accept:"text/plain"}}).success(function(conceptUuid){deferred.resolve(conceptUuid)}),deferred.promise},getAllDrugOrdersFor=function(patientUuid,conceptSetToBeIncluded,conceptSetToBeExcluded,isActive,patientProgramUuid){var deferred=$q.defer(),params={patientUuid:patientUuid};return conceptSetToBeIncluded&&(params.includeConceptSet=conceptSetToBeIncluded),conceptSetToBeExcluded&&(params.excludeConceptSet=conceptSetToBeExcluded),void 0!==isActive&&(params.isActive=isActive),patientProgramUuid&&(params.patientProgramUuid=patientProgramUuid),$http.get(Bahmni.Common.Constants.bahmniDrugOrderUrl+"/drugOrderDetails",{params:params,withCredentials:!0}).success(function(response){deferred.resolve(response)}),deferred.promise},voidDrugOrder=function(drugOrder){var deferred=$q.defer();return $http.delete([Bahmni.Common.Constants.ordersUrl,"/",drugOrder.uuid].join("")).success(function(response){deferred.resolve(response)}),deferred.promise},sharePrescriptions=function(prescriptionDetails){$http.get("common/views/prescriptionPrint.html").then(function(templateData){var template=templateData.data,printScope=$rootScope.$new();angular.extend(printScope,prescriptionDetails);var element=$compile($("<div>"+template+"</div>"))(printScope),renderAndSendPromise=$q.defer(),waitForRenderAndSend=function(){return printScope.$$phase||$http.pendingRequests.length?$timeout(waitForRenderAndSend,1e3):(html2pdf().from(element.html()).outputPdf().then(function(pdfContent){var attachments=[{contentType:"application/pdf",name:"Precription_"+$filter("bahmniDate")(prescriptionDetails.visitDate).split(" ").join("-")+".pdf",data:btoa(pdfContent),url:null}],subject="Prescription for consultation at "+$rootScope.facilityLocation.name+" on "+$filter("bahmniDate")(prescriptionDetails.visitDate),body=transmissionService.getSharePrescriptionMailContent(prescriptionDetails),emailUrl=appService.getAppDescriptor().formatUrl(Bahmni.Common.Constants.sendViaEmailUrl,{patientUuid:prescriptionDetails.patient.uuid});transmissionService.sendEmail(attachments,subject,body,emailUrl,[],[])}),renderAndSendPromise.resolve(),printScope.$destroy()),renderAndSendPromise.promise};spinner.forPromise(waitForRenderAndSend())})},getOrderedProviderAttributesForPrint=function(attributeData,attributeTypesToFilter){if(attributeTypesToFilter){var filteredAttributes=attributeData.filter(function(attribute){return attributeTypesToFilter.includes(attribute.attributeType.display)});return filteredAttributes.sort(function(a,b){return attributeTypesToFilter.indexOf(a.attributeType.display)-attributeTypesToFilter.indexOf(b.attributeType.display)}),filteredAttributes}};return{getActiveDrugOrders:getActiveDrugOrders,getConfig:getConfig,getPrescribedDrugOrders:getPrescribedDrugOrders,getPrescribedAndActiveDrugOrders:getPrescribedAndActiveDrugOrders,getMedicationSchedulesForOrders:getMedicationSchedulesForOrders,getNonCodedDrugConcept:getNonCodedDrugConcept,getAllDrugOrdersFor:getAllDrugOrdersFor,voidDrugOrder:voidDrugOrder,sharePrescriptions:sharePrescriptions,printSelectedPrescriptions:function(printPrescriptionFeatureConfig,drugOrdersForPrint,patient,additionalInfo,diagnosesCodes,dispenserInfo,observationsEntries,allergiesData,visitDate){if(drugOrdersForPrint.length>0){var encounterDrugOrderMap=Object.values(drugOrdersForPrint.reduce(function(orderMap,item){const providerUuid=item.provider.uuid;return orderMap[providerUuid]||(orderMap[providerUuid]={providerUuid:providerUuid,drugOrders:[]}),orderMap[providerUuid].drugOrders.push(item),orderMap},{})),printParams={title:printPrescriptionFeatureConfig.title||"",header:printPrescriptionFeatureConfig.header||"",logo:printPrescriptionFeatureConfig.logo||""},templateUrl=printPrescriptionFeatureConfig.templateUrl||"../common/displaycontrols/prescription/views/prescription.html",fileName=patient.givenName+patient.familyName+"_"+patient.identifier+"_Prescription";const printData={patient:patient,encounterDrugOrderMap:encounterDrugOrderMap,printParams:printParams,additionalInfo:additionalInfo,diagnosesCodes:diagnosesCodes,dispenserInfo:dispenserInfo,observationsEntries:observationsEntries,allergies:allergiesData,visitDate:visitDate};printer.print(templateUrl,printData,fileName)}},getOrderedProviderAttributesForPrint:getOrderedProviderAttributesForPrint}}]),Bahmni.Clinical.StateNameEvenTypeMap={"search.patientsearch":"VIEWED_CLINICAL_PATIENT_SEARCH","patient.dashboard.show":"VIEWED_CLINICAL_DASHBOARD","patient.dashboard.show.observations":"VIEWED_OBSERVATIONS_TAB","patient.dashboard.show.diagnosis":"VIEWED_DIAGNOSIS_TAB","patient.dashboard.show.treatment.page":"VIEWED_TREATMENT_TAB","patient.dashboard.show.disposition":"VIEWED_DISPOSITION_TAB","patient.dashboard.show.summary":"VIEWED_DASHBOARD_SUMMARY","patient.dashboard.show.orders":"VIEWED_ORDERS_TAB","patient.dashboard.show.bacteriology":"VIEWED_BACTERIOLOGY_TAB","patient.dashboard.show.investigation":"VIEWED_INVESTIGATION_TAB","patient.visit.summaryprint":"VIEWED_SUMMARY_PRINT","patient.dashboard.visit":"VIEWED_VISIT_DASHBOARD","patient.dashboard.ipdVisit":"VIEWED_VISIT_DASHBOARD","patient.dashboard.visitPrint":"VIEWED_VISIT_PRINT","patient.dashboard.observation":"VIEWED_DASHBOARD_OBSERVATION","patient.patientProgram.show":"VIEWED_PATIENTPROGRAM"},angular.module("bahmni.common.util").factory("formPrintService",["$http","$q","printer","diagnosisService","observationsService","encounterService","visitService","allergyService",function($http,$q,printer,diagnosisService,observationsService,encounterService,visitService,allergyService){return{printForm:function(printData,encounterUuid,location){var templateUrl=printData.printConfig.templateUrl;if(templateUrl){var promises=[];printData.diagnosesWithCodes="",printData.observationsEntries=[];var visitSummary=null;if(void 0!==printData.printConfig.observationsConcepts){var promise=$q.all([diagnosisService.getPatientDiagnosis(printData.patient.uuid),observationsService.fetch(printData.patient.uuid,printData.printConfig.observationsConcepts,"latest",null,null,null,null,null)]).then(function(response){const diagnoses=response[0].data;printData.observationsEntries=response[1].data,angular.forEach(diagnoses,function(diagnosis){diagnosis.order===printData.printConfig.printDiagnosis.order&&diagnosis.certainty===printData.printConfig.printDiagnosis.certainity&&(printData.diagnosesWithCodes.length>0&&(printData.diagnosesWithCodes+=", "),null!==diagnosis.codedAnswer&&0!==diagnosis.codedAnswer.mappings.length?printData.diagnosesWithCodes+=diagnosis.codedAnswer.mappings[0].code+" - "+diagnosis.codedAnswer.name:null!==diagnosis.codedAnswer&&0==diagnosis.codedAnswer.mappings.length?printData.diagnosesWithCodes+=diagnosis.codedAnswer.name:null==diagnosis.codedAnswer&&null!==diagnosis.freeTextAnswer&&(printData.diagnosesWithCodes+=diagnosis.freeTextAnswer))})});promises.push(promise)}if(encounterUuid){var encounterPromise=encounterService.findByEncounterUuid(encounterUuid).then(function(response){return response.data.visitUuid});promises.push(encounterPromise)}printData.allergies="";var allergyPromise=allergyService.getAllergyForPatient(printData.patient.uuid).then(function(response){var allergies=response.data,allergiesList=[];200===response.status&&allergies.entry&&allergies.entry.forEach(function(allergy){allergy.resource.code.coding&&allergiesList.push(allergy.resource.code.coding[0].display)}),printData.allergies=allergiesList.join(", ")});promises.push(allergyPromise),Promise.all(promises).then(function(response){if(response[1])return visitService.getVisitSummary(response[1])}).then(function(response){visitSummary=response?response.data:void 0}).then(function(){printData.additionalInfo={},printData.additionalInfo.visitType=visitSummary?visitSummary.visitType:null,printData.additionalInfo.currentDate=new Date,printData.additionalInfo.facilityLocation=location;var tabName=printData.printConfig.header?printData.printConfig.header.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g,function(match,chr){return chr.toUpperCase()}).replace(/^[a-z]/,function(match){return match.toUpperCase()}):"",pageTitle=printData.patient.givenName+printData.patient.familyName+"_"+printData.patient.identifier+"_"+tabName;printer.print(templateUrl,printData,pageTitle)}).catch(function(error){console.error("Error fetching details for print: ",error)})}else printer.print("../clinical/common/views/formPrint.html",printData)}}}]);